(window.webpackJsonp=window.webpackJsonp||[]).push([[10,5],{11:function(e,a,n){"use strict";n.r(a),function(e){n.d(a,"default",(function(){return i}));var E,c,o,t=n(1);class i extends t.a{inited(){e.hub&&e.hub.fire&&e.hub.fire("changed",{level:0,children:[{level:2,title:"它是如何工作的？",hash:"%E5%AE%83%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84%EF%BC%9F"}]})}}o={},(c="components")in(E=i)?Object.defineProperty(E,c,{value:o,enumerable:!0,configurable:!0,writable:!0}):E[c]=o}.call(this,n(4))},29:function(e,a){e.exports=' <div class="content"><div class="markdown"><h1 id="%E4%BB%8B%E7%BB%8D"><a class="header-anchor" href="#%E4%BB%8B%E7%BB%8D">#</a> 介绍</h1> <p>SDoc 由两部分组成：第一部分是一个极简静态网站生成器，它包含由 San 驱动的主题系统和插件 API，另一个部分是为书写技术文档而优化的默认主题，它的诞生初衷是为了支持 San 及其子项目的文档需求。</p> <p>每一个由 SDoc 生成的页面都带有预渲染好的 HTML，也因此具有非常好的加载性能和搜索引擎优化（SEO）。同时，一旦页面被加载，San 将接管这些静态内容，并将其转换成一个完整的单页应用（SPA），其他的页面则会只在用户浏览到的时候才按需加载。</p> <h2 id="%E5%AE%83%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84%EF%BC%9F"><a class="header-anchor" href="#%E5%AE%83%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84%EF%BC%9F">#</a> 它是如何工作的？</h2> <p>事实上，一个 SDoc 网站是一个由 San、San Router 和 webpack 驱动的单页应用。如果你以前使用过 San 的话，当你在开发一个自定义主题的时候，你会感受到非常熟悉的开发体验，你甚至可以使用 San DevTools 去调试你的自定义主题。</p> <p>在构建时，我们会为应用创建一个服务端渲染（SSR）的版本，然后通过虚拟访问每一条路径来渲染对应的HTML。</p> </div></div> '},34:function(e,a,n){var E=n(2),c=n(29),o=n(11).default;e.exports=n(11),e.exports.default=E(o,c,[])}}]);