<template>
    <article id="content">
        <div
            id="router-view"
            s-ref="view"
            class="router-view {{isShowToc ? '' : 'hidden'}}"
        >
            {{ docit.content | raw }}
        </div>
        <aside
            s-if="isShowToc"
            class="toc"
        >
            <tree
                treeData="{{toc}}"
                selectedNodes="{{selectedNodes}}"
            >
                <a href="{{getHash(treeNode.hash)}}">{{ treeNode.title }}</a>
            </tree>
        </aside>
    </article>
</template>

<script>
import on from 'san/src/browser/on';
import un from 'san/src/browser/un';

import tree from '../components/tree';
import utils from './utils';

export default {
    components: {
        tree
    },
    initData() {
        return {
            toc: {},
            isShowToc: true,
            selectedNodes: []
        };
    },
    inited() {
        let toc = {};
        // SSR 时，可从最外层传入docit；client-entry时，从全局变量取
        const docit = this.data.get('docit');
        if (docit && docit.toc) {
            toc = docit.toc;
        }
        else if (global.SAN_DOCIT && global.SAN_DOCIT.toc) {
            toc = global.SAN_DOCIT.toc;
        }

        this.data.set('toc', toc);
    },
    attached() {
        // router 子组件无法通过组件事件或DOM树向上传递事件
        global.hub.on('changed', this.onChanged.bind(this));

        this.__onScroll = this.onScroll.bind(this);
        this.__onResize = this.onResize.bind(this);
        on(global, 'scroll', this.__onScroll);
        on(global, 'resize', this.__onResize);

        this.initScroll();

        this.resize();

        // SSR 时默认存在 HTML，清空后由 Router 渲染
        this.ref('view').innerHTML = '';
    },
    getHash(hash) {
        const docit = this.data.get('docit');
        const pathname = docit.pathname ? utils.base + docit.pathname : location.pathname;
        return pathname + '#' + hash;
    },
    onChanged(toc) {
        this.data.set('toc', toc);

        this.nextTick(this.initScroll.bind(this));

        this.resize();
    },
    getTocCount() {
        const toc = this.data.get('toc');

        let count = 0;
        utils.treeWalk(toc, () => count++);

        return count;
    },
    onResize() {
        if (this.timer) {
            global.clearTimeout(this.timer);
        }

        this.timer = global.setTimeout(() => {
            this.resize();
            this.timer = null;
        }, 10);
    },
    resize() {
        const width = document.documentElement.clientWidth || document.body.clientWidth;
        const isShowToc = width > 1000 && this.getTocCount() > 2;

        if (isShowToc !== this.data.get('isShowToc')) {
            this.data.set('isShowToc', isShowToc);
        }

        const isShowSidebar = width > 800;

        if (isShowSidebar !== this.parent.data.get('isShowSidebar')) {
            this.parent.data.set('isShowSidebar', isShowSidebar);
        }
    },
    initScroll() {
        const view = this.ref('view');
        const doms = view.querySelectorAll('H2, H3');

        if (!doms) {
            return;
        }
        this.postions = [];
        this.hashs = [];
        doms.forEach(dom => {
            this.postions.push(dom.offsetTop);
            this.hashs.push(dom.id);
        });

        const len = this.hashs.length;
        this.postions[len] = Number.MAX_VALUE;
        this.hashs[len] = this.hashs[this.hashs.length - 1];

        const toc = this.data.get('toc');
        if (toc && toc.children && toc.children.length > 0) {
            this.data.set('selectedNodes', [toc.children[0]]);
        }
    },
    onScroll(evt) {
        if (this.timer) {
            global.clearTimeout(this.timer);
        }

        this.timer = global.setTimeout(() => {
            this.scrollPostion();
            this.timer = null;
        }, 10);
    },
    scrollPostion() {
        const scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
        const index = this.postions.findIndex(pos => pos >= scrollTop);

        if (index !== -1) {
            this.changeSelected(this.hashs[index]);
        }
    },
    changeSelected(hash) {
        if (this.selected === hash) {
            return;
        }
        const selected = [];
        const toc = this.data.get('toc');
        utils.treeWalk(toc, item => {
            if (item.hash === hash) {
                selected.push(item);
            }
        });
        this.data.set('selectedNodes', selected);

        this.selected = hash;
    },
    detached() {
        un(global, 'scroll', this.__onScroll);
        un(global, 'resize', this.__onResize);
    }
};
</script>
